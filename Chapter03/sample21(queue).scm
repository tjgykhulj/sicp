;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))

(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))

(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))

(define x (make-queue))
(insert-queue! x 3)
(insert-queue! x 4)
(insert-queue! x 5)
(delete-queue! x)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21
(define (print-queue queue)
  (front-ptr queue))

(define y (make-queue))
(insert-queue! y 1)
(print-queue y)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" queue)
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               front-ptr)
              (else
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)
               front-ptr))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue" queue))
            (else
             (set! front-ptr (cdr front-ptr))
             front-ptr)))
    
    (define (dispatch op)
      (cond ((eq? op 'insert-queue!) insert-queue!)
            ((eq? op 'delete-queue!) delete-queue!)
            ((eq? op 'empty-queue?) empty-queue?)
            ((eq? op 'front-queue) front-queue)
            (else
             (error "Unknown operation -- DISPATCH" op))))
    dispatch))

(define x (make-queue))
((x 'insert-queue!) 'a)
((x 'insert-queue!) 'b)
((x 'empty-queue?))
((x 'delete-queue!))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23
(define (make-dueue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?) (null? front-ptr))
    (define (value x) (car x))
    (define (next x) (cddr x))
    (define (set-prev x y) (set-cdr! x y))
    (define (set-next x y) (set-cddr! x y))

    (define (print)
      (define (iter x)
        (if (not (null? x))
            (display (value x))
            (if (not (eq? x rear-ptr))
                (iter (next x)))))
      (iter front-ptr))
    
    (define (front-insert! item)
      (let ((new-pair (list item '() front-ptr)))
        (set! front-ptr new-pair)
        (if (empty?) (set! rear-ptr new-pair))))
    (define (rear-insert! item)
      (let ((new-pair (list item rear-ptr '())))
        (set! rear-ptr new-pair)
        (if (empty?) (set! front-ptr new-pair))))
    (define (front-delete!)
      (cond ((empty?)
             (error "DELETE FRONT! called with an empty dueue"))
            (else
             (set! front-ptr (next front-ptr))
             (set-next rear-ptr front-ptr))))
    (define (rear-delete!)
      (cond ((empty?)
             (error "DELETE REAR! called with an empty dueue"))
            (else
             (set! rear-ptr (prev front-ptr))
             (set-prev front-ptr rear-ptr))))
    
    (define (dispatch op)
      (cond ((eq? op 'front-insert!) front-insert!)
            ((eq? op 'front-delete!) front-delete!)
            ((eq? op 'rear-insert!) rear-insert!)
            ((eq? op 'rear-delete!) rear-delete!)
            ((eq? op 'empty?) empty?)
            ((eq? op 'print) print)
            (else
             (error "Unknown operation -- DISPATCH" op))))
    dispatch))

(define x (make-dueue))
((x 'front-insert!) 'a)
((x 'front-insert!) 'b)
((x 'print))
