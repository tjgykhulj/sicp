(load "~/scheme/2/sample24-32.scm")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33
(define (map p seq)
  (accumulate (lambda (x y) (cons (p x) y)) '() seq))
(map square (list 1 2 3 4 5))

(define (append seq1 seq2)
  (accumulate cons seq2 seq1))
(append (list 1 2 3 4) (list 5 6 7 8))

(define (length sequence)
  (accumulate (lambda (x y) (+ y 1)) 0 sequence))
(length (list 1 2 (list 3 4) 5))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34
(define (horner-eval x c-seq)
  (accumulate (lambda (this-c higher-terms)
                (* x
                   (+ this-c higher-terms)))
              0 c-seq))
(horner-eval 2 (list 1 3 0 5 0 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35
(define (count-leaves t)
  (accumulate +
              0
              (map (lambda (tree)
                     (if (pair? tree)
                         (count-leaves tree)
                         1))
                   t)))
(count-leaves (list (list 2 4) (list 1 3)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36
(define (accumulate-n op init seqs)
    (if (null? (car seqs))
        '()
        (cons (accumulate op init (car-n seqs))
              (accumulate-n op init (cdr-n seqs)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37
